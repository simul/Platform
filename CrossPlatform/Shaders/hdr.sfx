//  Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "common.sl"
#include "render_states.sl"
#include "depth.sl"
#include "hdr_constants.sl"
#include "colour_packing.sl"
#include "debug_constants.sl"
#include "noise.sl"
 
uniform Texture2D imageTexture					SIMUL_TEXTURE_REGISTER(0);
uniform TEXTURE2DMS_FLOAT4 imageTextureMS		SIMUL_TEXTURE_REGISTER(0);
uniform TextureCube nearFarTexture				SIMUL_TEXTURE_REGISTER(3);
uniform Texture2D depthTexture					SIMUL_TEXTURE_REGISTER(1);
uniform TEXTURE2DMS_FLOAT4 depthTextureMS		SIMUL_TEXTURE_REGISTER(1);

vec4 texture_resolve(TEXTURE2DMS_FLOAT4 textureMS,vec2 texCoords)
{
	uint2 dims;
	uint numberOfSamples;
	GET_DIMENSIONS_MSAA(textureMS,dims.x,dims.y,numberOfSamples);
	int2 pos=int2(vec2(dims)*texCoords);
	vec4 d=vec4(0,0,0,0);
	for(uint k=0;k<numberOfSamples;k++)
	{
		d+=TEXTURE_LOAD_MSAA(textureMS,pos,k);
	}
	d/=float(numberOfSamples);
	return d;
}
 
shader vec4 ShowDepthPS_ReverseDepth(posTexVertexOutput IN) : SV_Target
{
	vec4 depth = depthTexture.Sample(clampSamplerState,IN.texCoords);
	DepthInterpretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=true;
	float dist = 10.0*depthToFadeDistance(depth.x, 2.0*(IN.texCoords - 0.5), depthInterpretationStruct, tanHalfFov);
	vec4 u = vec4(1, dist, dist, 1.0);
	return u;
}

shader vec4 ShowDepthPS_ForwardDepth(posTexVertexOutput IN) : SV_Target
{
	vec4 depth		=texture_clamp(depthTexture,IN.texCoords);
	DepthInterpretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=false;
	float dist		=10.0*depthToFadeDistance(depth.x,2.0*(IN.texCoords-0.5),depthInterpretationStruct,tanHalfFov);
	vec4 u=vec4(1,dist,dist,1.0);
	return u;
}

/*
 The Filmic tone mapper is from: http://filmicgames.com/Downloads/GDC_2010/Uncharted2-Hdr-Lighting.pptx
These numbers DO NOT have the pow(x,1/2.2) baked in
*/
vec3 FilmicTone(vec3 x)
{
	float A				=0.22;	//Shoulder Strength
	float B				=0.30;	//Linear Strength
	float C				=0.10;	//Linear Angle
	float D				=0.20;	//Toe Strength
	float E				=0.01;	//Toe Numerator
	float F				=0.30;	//Toe Denominator
	//Note: E/F = Toe Angle
	float LinearWhite	=1.2;	//Linear White Point Value
	vec3 Fx				= ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F)) - E/F;
	float Fw				= ((LinearWhite*(A*LinearWhite+C*B)+D*E)/(LinearWhite*(A*LinearWhite+B)+D*F)) - E/F;
	vec3 c				= Fx/Fw;
	return c;
}


shader vec4 PS_InfraRed(posTexVertexOutput IN) : SV_Target
{
	vec4 c					=texture_clamp(imageTexture,IN.texCoords);
	c.rgb					*=infraredIntegrationFactors.xyz;
	float final_radiance	=c.x+c.y+c.z;
	c=vec4(final_radiance,final_radiance,final_radiance,c.a);
	c.rgb*=exposure;
	c.rgb=pow(c.rgb,vec3(gamma,gamma,gamma));
	vec4 u=vec4(c.rgb,1.0);
	return u;
}

shader vec4 PS_InfraRed_MSAA(posTexVertexOutput IN) : SV_Target
{
	vec4 c=texture_resolve(imageTextureMS,IN.texCoords);
	c.rgb					*=infraredIntegrationFactors.xyz;
	float final_radiance	=c.x+c.y+c.z;
	c=vec4(final_radiance,final_radiance,final_radiance,c.a);
	c.rgb*=exposure;
	c.rgb=pow(c.rgb,vec3(gamma,gamma,gamma));
	vec4 u=vec4(c.rgb,1.0);
	return u;
}

shader posTexVertexOutput Debug2DVS(idOnly id)
{
	return VS_ScreenQuad(id,rect);
}

shader vec4 TexturedPS(posTexVertexOutput IN) : SV_Target
{
	vec4 res=vec4(0,1,0,1);
	return res;
}

shader vec4 ExposureGammaPS(posTexVertexOutput IN) : SV_Target
{
	vec4 c	=imageTexture.Sample(samplerStateNearest,IN.texCoords);
	c.rgb	*=exposure;
	c.rgb	=pow(c.rgb,vec3(gamma,gamma,gamma));
	vec4 u	=vec4(c.rgb,1.0);
	return u;
}

shader vec4 ExposureGammaPS_MSAA(posTexVertexOutput IN) : SV_Target
{
	vec4 c=texture_resolve(imageTextureMS,IN.texCoords);
	c.rgb*=exposure;
	c.rgb=pow(c.rgb,vec3(gamma,gamma,gamma));
	vec4 u=vec4(c.rgb,1.0);
	return u;
}


void UpdateNearestSample(	inout float MinDist,
							inout vec2 NearestUV,
							float Z,
							vec2 UV,
							float ZFull
							)
{
	float Dist = abs(Z - ZFull);
	if (Dist < MinDist)
	{
		MinDist = Dist;
		NearestUV = UV;
	}
}

bool IsSampleNearer(inout float MinDist,float Z,float ZFull)
{
	float Dist = abs(Z - ZFull);
	return (Dist < MinDist);
}

shader vec4 PS_CubemapToScreenspace(posTexVertexOutput IN): SV_Target
{
	vec4 clip_pos		=vec4(-1.0,1.0,1.0,1.0);
	clip_pos.x			+=2.0*IN.texCoords.x;
	clip_pos.y			-=2.0*IN.texCoords.y;
	vec3 view			=mul(invViewProj,clip_pos).xyz;
	vec4 res			=texture_cube_lod(nearFarTexture,view,0);
	return res;
}
 

float safelog(float x)
{
	if(x<0.001)
		x=0.001;
	return log(x);
}

VertexShader mainvs_4_0=CompileShader(vs_4_0,VS_SimpleFullscreen());
VertexShader mainvs_5_0=CompileShader(vs_5_0,VS_SimpleFullscreen());

technique exposure_gamma
{
	pass main
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(NoBlend, vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF );
		SetGeometryShader(NULL);
		SetVertexShader(mainvs_4_0);
		SetPixelShader(CompileShader(ps_4_0,ExposureGammaPS()));
	}
	pass msaa
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(NoBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetGeometryShader(NULL);
		SetVertexShader(mainvs_5_0);
		SetPixelShader(CompileShader(ps_5_0,ExposureGammaPS_MSAA()));
	}
}

technique infra_red
{
	pass main
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(NoBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetGeometryShader(NULL);
		SetVertexShader(mainvs_5_0);
		SetPixelShader(CompileShader(ps_5_0,PS_InfraRed()));
	}
	pass msaa
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(NoBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetGeometryShader(NULL);
		SetVertexShader(mainvs_5_0);
		SetPixelShader(CompileShader(ps_5_0,PS_InfraRed_MSAA()));
	}
}


technique show_depth
{
	pass reverse_depth
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(NoBlend,vec4( 0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF );
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0,Debug2DVS()));
		SetPixelShader(CompileShader(ps_4_0,ShowDepthPS_ReverseDepth()));
	}
	pass forward_depth
	{
		SetRasterizerState(RenderNoCull);
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(NoBlend, vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0, Debug2DVS()));
		SetPixelShader(CompileShader(ps_4_0, ShowDepthPS_ForwardDepth()));
	}
}

technique textured
{
	pass p0
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF );
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0,Debug2DVS()));
		SetPixelShader(CompileShader(ps_4_0,TexturedPS()));
	}
}

technique cubemap_to_screenspace
{
	pass p0
	{
		SetRasterizerState(RenderNoCull);
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(DontBlend,vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_SimpleFullscreen()));
		SetPixelShader(CompileShader(ps_5_0,PS_CubemapToScreenspace()));
	}
}
