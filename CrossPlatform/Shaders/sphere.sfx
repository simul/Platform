//  Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "common.sl"
#include "render_states.sl"
#include "depth.sl"
#include "quaternion.sl"
#include "sphere_constants.sl"

uniform Texture2D imageTexture SIMUL_TEXTURE_REGISTER(0);

struct vec3input
{
	vec3 position	: POSITION;
};

struct v2f_cubemap
{
	vec4 hPosition	: SV_POSITION;
	vec3 wDirection	: TEXCOORD0;
};

shader v2f_cubemap VS_DrawCubemapSphere(idOnly IN) 
{
	v2f_cubemap OUT;
	// we have (latitudes+1)*(longitudes+1)*2 id's
	uint vertex_id		=IN.vertex_id;
	uint latitude_strip	=vertex_id/(longitudes+1)/2;
	vertex_id			-=latitude_strip*(longitudes+1)*2;
	uint longitude		=vertex_id/2;
	vertex_id			-=longitude*2;
	float azimuth		=2.0*3.1415926536*float(longitude)/float(longitudes);
	float elevation		=.99*(float(latitude_strip+vertex_id)/float(latitudes+1)-0.5)*3.1415926536;
	#ifdef SFX_OPENGL
	elevation *= -1;
	#endif
	float cos_el		=cos(elevation);
	vec3 pos			=radius*vec3(cos(azimuth)*cos_el,sin(azimuth)*cos_el,sin(elevation));
	OUT.hPosition		=mul(debugWorldViewProj,vec4(pos.xyz,1.0));
	#ifdef SFX_OPENGL
	OUT.hPosition.y *= -1;
	#endif
	OUT.wDirection		=normalize(pos.xyz);
	return OUT;
}

shader vec4 PS_DrawSphere(v2f_cubemap IN): SV_TARGET
{
	vec3 view		=IN.wDirection.xyz;
	vec4 u			=vec4(view.rgb,1.0);
	return u;
}

struct v2f
{
	vec4 hPosition	: SV_POSITION;
	vec4 colour		: TEXCOORD0;
	vec2 texCoords : TEXCOORD1;
};


shader v2f VS_DrawLatLongSphere(idOnly IN) 
{
	v2f OUT;
	// we have (latitudes+1)*(longitudes+1)*2 id's
	uint vertex_id		=IN.vertex_id;
	vec3 pos=vec3(0,0,0);
	if(vertex_id<(latitudes-1)*(loopSteps+3))
	{
		uint latitude_strip	=vertex_id/(loopSteps+uint(3));
		int loop_index		=int(vertex_id-latitude_strip*(loopSteps+3));
		int longitude		=min(max(0,loop_index-1),int(loopSteps));
		float azimuth		=2.0*3.1415926536*float(longitude)/float(loopSteps);
		float elevation		=.999*(float(latitude_strip+1)/float(latitudes)-0.5)*3.1415926536;
		float cos_el		=cos(elevation);
		pos					=radius*vec3(cos(azimuth)*cos_el,sin(azimuth)*cos_el,sin(elevation));
		// bright at the equator:
		float b				=(uint)(latitude_strip+1)==latitudes/2?1.0:0.7;
		b					*=(loop_index>0&&loop_index<(loopSteps+2))?1.0:0.0;
		OUT.colour			=multiplier;
		//OUT.colour.a		*=latitude_strip%2?1.0:0.5;
		OUT.colour.a		*=b; //Latitude Colour
	}
	else
	{
		vertex_id				-=(latitudes-1)*(loopSteps+3);
		
		uint longitude_strip	=vertex_id/(loopSteps+uint(3));
		int loop_index			=int(vertex_id-longitude_strip*(loopSteps+uint(3)));
		int latitude			=min(max(0,loop_index-1),int(loopSteps));
		float azimuth			=2.0*3.1415926536*float(longitude_strip)/float(longitudes);
		float elevation			=.999*(float(latitude)/float(loopSteps)-0.5)*3.1415926536;
		float cos_el			=cos(elevation);
		pos						=radius*vec3(cos(azimuth)*cos_el,sin(azimuth)*cos_el,sin(elevation));
		// bright at the meridian:
		float b					=(longitude_strip%(longitudes/2))==0?1.0:0.8;
		b						*=loop_index>0&&loop_index<(loopSteps+2)?b:0.0;
		OUT.colour				=multiplier;
		//	OUT.colour.r=1.0-float(longitude_strip)/float(longitudes);
			OUT.colour.a			*=b;//latitude>0&&latitude<latitudes?b:0.0; //Longitude Colour
		//	OUT.colour			*=saturate(elevation/1.7);
	
	}
	OUT.hPosition			=mul(debugWorldViewProj,vec4(pos.xyz,1.0));
	vec4 temp				=mul(debugWorldViewProj,vec4(2.0*pos.xyz,1.0));
	float tz				=temp.z/temp.w;
	float z					=OUT.hPosition.z/OUT.hPosition.w;
	OUT.texCoords = vec2(0, 0);
	// Don't render "over the horizon".
	float horizon_dotp=dot(sphereCamPos,pos);
	float Rh=length(sphereCamPos);
	float horizon_cosine=horizon_dotp/(radius*Rh);
	float min_horizon_cosine=radius/Rh;
	if(horizon_cosine<min_horizon_cosine)
		OUT.colour.a*=0;
	return OUT;
}

shader v2f VS_DrawQuadOnSphere(idOnly IN) 
{
	v2f OUT;
	vec3 poss[4];
	poss[0]			=vec3( 1.0,-1.0,1.0);
	poss[1]			=vec3( 1.0, 1.0,1.0);
	poss[2]			=vec3(-1.0, 1.0,1.0);
	poss[3]			=vec3(-1.0,-1.0,1.0);
	vec3 pos;
	if(IN.vertex_id<8)
	{
		uint vert		=(IN.vertex_id+1)/2;
		pos				=poss[vert%4];
		pos.xy			*=sideview;
		pos.z			=1.0;
		pos				=normalize(pos);
		OUT.colour		=debugColour;
	}
	else
	{
		uint vert		=IN.vertex_id-8;
		int axis		=int(vert/3);
		vec3 ax			=vec3(axis==0,axis==1,axis==2);
		pos				=vec3(0,0,1.0);
		if(bool(vert%2))
			pos			+=ax*sideview;
		vec4 finalCol  = vec4(0.0,0.0,0.0,1.0);
		if(axis == 0)
		{
			finalCol.xyz += vec3(0.5,0.0,0.0);
		}
		if(axis == 1)
		{
			finalCol.xyz += 0.75*vec3(0.0,0.5,0.0);
		}
		if(axis == 2)
		{
			finalCol.xyz += vec3(0.0,0.0,0.5);
		}
		OUT.colour = finalCol;
		//OUT.colour=vec4((axis==0)*vec3(1,0.5,0.5)+(axis==1)*vec3(0,1.0,0)+(axis==2)*vec3(0.5,0.5,1.0),1.0);
	}
	OUT.texCoords		= vec2(0,0);
	pos					= radius*rotate_by_quaternion(quaternion,pos);
	// The default orientation is on the equator, whereby X=East, Y=North and Z=Up.
	// The quaternion rotates from that position.
	OUT.hPosition		= mul(debugWorldViewProj,vec4(pos.xyz,1.0));

	vec4 temp				=mul(debugWorldViewProj,vec4(2.0*pos.xyz,1.0));
	float tz				=temp.z/temp.w;
	float z					=OUT.hPosition.z/OUT.hPosition.w;
	if(tz<z)
		OUT.colour*=0;

	return OUT;
}

shader v2f VS_DrawAxesOnSphere(idOnly IN) 
{
	v2f OUT;
	vec3 poss[4];
	poss[0]			=vec3( 1.0,-1.0,1.0);
	poss[1]			=vec3( 1.0, 1.0,1.0);
	poss[2]			=vec3(-1.0, 1.0,1.0);
	poss[3]			=vec3(-1.0,-1.0,1.0);
	vec3 pos;
	{
		uint vert		=IN.vertex_id;
		int axis		=int(vert/3);
		vec3 ax			=vec3(axis==0,axis==1,axis==2);
		pos				=vec3(0,0,0);
		if(bool(vert%2))
			pos			+=ax*sideview;
		vec4 finalCol  = vec4(0.0,0.0,0.0,1.0);
		if(axis == 0)
		{
			finalCol.xyz += vec3(0.5,0.0,0.0);
		}
		if(axis == 1)
		{
			finalCol.xyz += 0.75*vec3(0.0,0.5,0.0);
		}
		if(axis == 2)
		{
			finalCol.xyz += vec3(0.0,0.0,0.5);
		}
		OUT.colour = finalCol;
		//OUT.colour=vec4((axis==0)*vec3(1,0.5,0.5)+(axis==1)*vec3(0,1.0,0)+(axis==2)*vec3(0.5,0.5,1.0),1.0);
	}
	OUT.texCoords		= vec2(0,0);
	pos					= position+radius*rotate_by_quaternion(quaternion,pos);
	// The default orientation is on the equator, whereby X=East, Y=North and Z=Up.
	// The quaternion rotates from that position.
	OUT.hPosition		= mul(debugWorldViewProj,vec4(pos.xyz,1.0));

	vec4 temp				=mul(debugWorldViewProj,vec4(2.0*pos.xyz,1.0));
	float tz				=temp.z/temp.w;
	float z					=OUT.hPosition.z/OUT.hPosition.w;
	if(tz<z)
		OUT.colour*=0;

	return OUT;
}

shader v2f VS_DrawFilledQuadOnSphere(idOnly IN)
{
	v2f OUT;
	vec3 poss[4];
	poss[1] = vec3(1.0, -1.0, 1.0);
	poss[0] = vec3(1.0, 1.0, 1.0);
	poss[2] = vec3(-1.0, 1.0, 1.0);
	poss[3] = vec3(-1.0, -1.0, 1.0);
	vec3 pos;
	uint vert = (IN.vertex_id ) ;
	pos = poss[vert % 4];
	OUT.texCoords = pos.xy * 0.5 + vec2(0.5, 0.5);
	pos.xy *= sideview;
	pos.z = 1.0;
	pos = normalize(pos);
	OUT.colour = multiplier;
	pos = radius * rotate_by_quaternion(quaternion, pos);
	OUT.hPosition = mul(debugWorldViewProj, vec4(pos.xyz, 1.0));

	vec4 temp				=mul(debugWorldViewProj,vec4(2.0*pos.xyz,1.0));
	float tz				=temp.z/temp.w;
	float z					=OUT.hPosition.z/OUT.hPosition.w;
	if(tz<z)
		OUT.colour*=0;

	return OUT;
}

shader v2f VS_DrawCircleOnSphere(idOnly IN) 
{
	v2f OUT;
	float angle			=float(IN.vertex_id)/31.0*3.1415926536*2.0;
	vec3 pos			=vec3(sin(sideview) * cos(angle), sin(sideview) * sin(angle), cos(sideview));
	pos					=normalize(pos);
	OUT.colour			=debugColour;
	
	pos					=radius*rotate_by_quaternion(quaternion,pos);
	// The default orientation is on the equator, whereby X=East, Y=North and Z=Up.
	// The quaternion rotates from that position.
	OUT.hPosition		=mul(debugWorldViewProj,vec4(pos.xyz,1.0));
	OUT.texCoords		= vec2(0,0);

	vec4 temp				=mul(debugWorldViewProj,vec4(2.0*pos.xyz,1.0));
	float tz				=temp.z/temp.w;
	float z					=OUT.hPosition.z/OUT.hPosition.w;
	if(tz<z)
		OUT.colour*=0;

	return OUT;
}

shader v2f VS_DrawArcOnSphere(idOnly IN) 
{
	v2f OUT;
	float interp	=float(IN.vertex_id)/float(latitudes);
	vec3 pos		=vec3(0,0,1.0);
	OUT.colour		=lerp(debugColour,multiplier,interp);
	vec4 q			=slerp(quaternion,quaternion2,interp);
	pos				=radius*rotate_by_quaternion(q,pos);
	OUT.hPosition	=mul(debugWorldViewProj,vec4(pos.xyz,1.0));
	OUT.texCoords	= vec2(0, 0);

	vec4 temp				=mul(debugWorldViewProj,vec4(2.0*pos.xyz,1.0));
	float tz				=temp.z/temp.w;
	float z					=OUT.hPosition.z/OUT.hPosition.w;
	if(tz<z)
		OUT.colour*=0;

	return OUT;
}

shader v2f VS_DrawFilledCircleOnSphere(idOnly IN)
{
	v2f OUT;
	float angle	= float(IN.vertex_id/2) / 31.0*3.1415926536*2.0;
	float mult	= float(IN.vertex_id % 2);
	vec3 pos	= vec3(mult*sideview*cos(angle),mult*sideview*sin(angle), 1.0);
	pos			= normalize(pos);
	OUT.colour	= multiplier;

	pos = radius * rotate_by_quaternion(quaternion, pos);
	// The default orientation is on the equator, whereby X=East, Y=North and Z=Up.
	// The quaternion rotates from that position.
	OUT.hPosition = mul(debugWorldViewProj, vec4(pos.xyz, 1.0));
	OUT.texCoords = vec2(0, 0);

		vec4 temp				=mul(debugWorldViewProj,vec4(2.0*pos.xyz,1.0));
	float tz				=temp.z/temp.w;
	float z					=OUT.hPosition.z/OUT.hPosition.w;
	if(tz<z)
		OUT.colour*=0;

	return OUT;
}

shader posTexColVertexOutput VS_DrawTextureOnSphere(idOnly IN) 
{
	posTexColVertexOutput OUT;
	vec3 poss[4];
	poss[0]			=vec3( 1.0,-1.0,1.0);
	poss[1]			=vec3( 1.0, 1.0,1.0);
	poss[2]			=vec3(-1.0, 1.0,1.0);
	poss[3]			=vec3(-1.0,-1.0,1.0);
	vec3 pos;
	uint vert=IN.vertex_id%4;
	{
		pos				=poss[vert];
		OUT.texCoords	=pos.xy*0.5+vec2(0.5,0.5);
		pos.xy			*=sideview;
		pos.z			=1.0;
		pos				=normalize(pos);
	}
	pos					=radius*rotate_by_quaternion(quaternion,pos);
	// The default orientation is on the equator, whereby X=East, Y=North and Z=Up.
	// The quaternion rotates from that position.
	OUT.hPosition		=mul(debugWorldViewProj,vec4(pos.xyz,1.0));

	vec4 temp				=mul(debugWorldViewProj,vec4(2.0*pos.xyz,1.0));
	float tz				=temp.z/temp.w;
	float z					=OUT.hPosition.z/OUT.hPosition.w;
	if(tz<z)
		OUT.colour=vec4(0,0,0,0);
	else
		OUT.colour=vec4(1,1,1,1);

	return OUT;
}

shader posTexColVertexOutput VS_DrawCurvedTextureOnSphere(idOnly IN)
{
	const uint divisions = 8;
	const uint range = 2;
	const uint totalPosCount = (divisions + 1) * (divisions + 1);
	float step = float(range) / float(divisions);

	vec3 baseQuad[6];
	baseQuad[0] = vec3(-1.0, -1.0, 1.0);
	baseQuad[1] = vec3(-1.0, -1.0 + step, 1.0);
	baseQuad[2] = vec3(-1.0 + step, -1.0 + step, 1.0);
	baseQuad[3] = vec3(-1.0 + step, -1.0 + step, 1.0);
	baseQuad[4] = vec3(-1.0 + step, -1.0, 1.0);
	baseQuad[5] = vec3(-1.0, -1.0, 1.0);

	vec3 poss[8 * 8 * 6];
	for (uint y = 0; y < divisions; y++)
	{
		for (uint x = 0; x < divisions; x++)
		{
			uint cornerVertId = 6 * (x + divisions * y);

			poss[cornerVertId + 0] = baseQuad[0] + vec3(step * float(x), step * float(y), 0.0);
			poss[cornerVertId + 1] = baseQuad[1] + vec3(step * float(x), step * float(y), 0.0);
			poss[cornerVertId + 2] = baseQuad[2] + vec3(step * float(x), step * float(y), 0.0);
			poss[cornerVertId + 3] = baseQuad[3] + vec3(step * float(x), step * float(y), 0.0);
			poss[cornerVertId + 4] = baseQuad[4] + vec3(step * float(x), step * float(y), 0.0);
			poss[cornerVertId + 5] = baseQuad[5] + vec3(step * float(x), step * float(y), 0.0);
		}
	}

	vec3 pos;
	posTexColVertexOutput OUT;
	uint vert = IN.vertex_id;
	{
		pos = poss[vert];
		OUT.texCoords = pos.xy * 0.5 + vec2(0.5, 0.5);
		pos.xy *= sin(2 * sideview); //Convert to sphereical coordinates style.
		pos.z = cos(2 * sideview);	 //Convert to sphereical coordinates style.
		pos = normalize(pos);
	}
	pos = radius * rotate_by_quaternion(quaternion, pos);
	// The default orientation is on the equator, whereby X=East, Y=North and Z=Up.
	// The quaternion rotates from that position.
	OUT.hPosition = mul(debugWorldViewProj, vec4(pos.xyz, 1.0));

	vec4 temp				=mul(debugWorldViewProj,vec4(2.0*pos.xyz,1.0));
	float tz				=temp.z/temp.w;
	float z					=OUT.hPosition.z/OUT.hPosition.w;
	if(tz<z)
		OUT.colour=vec4(0,0,0,0);
	else
		OUT.colour=vec4(1,1,1,1);

	return OUT;
}

shader vec4 PS_DrawTextureOnSphere(posTexColVertexOutput IN) : SV_TARGET
{
	vec2 texc	=IN.texCoords.xy;
	// In DX, texcoords start from top left. In GL, sensibly, it's bottom-left.
	texc.y		=1.0-texc.y;
	vec4 res	=IN.colour*multiplier;
	res			*=texture_nearest_lod(imageTexture,texc.xy,0);
	return res;
}

shader vec4 PS_DrawColouredSphere(posTexVertexOutput IN) :SV_TARGET
{
	vec4 clip_pos = vec4(-1.0,1.0,1.0,1.0);
	clip_pos.x += 2.0 * IN.texCoords.x;
	clip_pos.y -= 2.0 * IN.texCoords.y;
	vec3 view = normalize(mul(invWorldViewProj, clip_pos).xyz);
	// view.z gives the elevation angle.
	float R = radius;
	float Rh = length(sphereCamPos);
	float theta = asin(R / Rh);
	float dotp=dot(-normalize(sphereCamPos),view);
	if (dotp < cos(theta))
		discard;
	
	float opacity = 1.0 - ((dotp - cos(theta)) / (1.0 - cos(theta)));
	
	return vec4(debugColour.rgb, 1.0f);
}

shader vec4 PS_DrawTexturedSphere(posTexVertexOutput IN) :SV_TARGET
{
	vec4 clip_pos = vec4(-1.0,1.0,1.0,1.0);
	clip_pos.x += 2.0 * IN.texCoords.x;
	clip_pos.y -= 2.0 * IN.texCoords.y;
	vec3 view = normalize(mul(invWorldViewProj, clip_pos).xyz);
	// view.z gives the elevation angle.
	float R = radius;
	float Rh = length(sphereCamPos);
	float theta = asin(R / Rh);
	float dotp=dot(-normalize(sphereCamPos),view);
	if (dotp < cos(theta))
		discard;//return vec4(0,0,0,0);
	// Find position where view hits rad.
	// ground=cam+d*view;
	// |ground|=R.
	// Solve for (cam+d*view).(cam+d*view)=R^2.
	float B=2.0*dot(sphereCamPos,view);
	float C=dot(sphereCamPos,sphereCamPos)-radius*radius;
	float d=0.5*(-B-sqrt(B*B-4.0*C));
	vec3 pos=sphereCamPos+d*view;
	float longitude=atan2(pos.y,pos.x);
	float latitude=asin(pos.z);
	vec2 texc=vec2(0.5+longitude/2.0/SIMUL_PI_F,0.5-latitude/SIMUL_PI_F);
	vec4 lookup=debugColour*texture_nearest_lod(imageTexture,texc.xy,0);

	return vec4(lookup.rgb,1.0);
}

shader vec4 DebugPS(v2f IN) : SV_TARGET
{
	if(IN.colour.a==0)
		discard;
	vec4 c		=IN.colour;
	return c;
}

shader vec4 FillPS(v2f IN) : SV_TARGET
{
	vec4 c		=IN.colour;
	c.rgb*=IN.colour.a;
	return c;
}

shader vec4 PS_DrawChequeredQuadOnSphere(v2f IN) : SV_TARGET
{
	vec4 c = IN.colour;
	vec2 p	= IN.texCoords*512.0;
	uint2 u2=uint2(p);
	float highlight=float((u2.x+u2.y)%2);
	c.a*=highlight;
	return c;
}

PixelShader debugps_5_0=CompileShader(ps_5_0,DebugPS());
PixelShader fillps_5_0=CompileShader(ps_5_0,FillPS());

BlendState DontWriteColour
{
	BlendEnable[0]	=FALSE;
	RenderTargetWriteMask[0]=0;
};

BlendState AlphaBlendNoAlphaWrite
{
	BlendEnable[0]	=TRUE;
	SrcBlend		=SRC_ALPHA;
	DestBlend		=INV_SRC_ALPHA;
	RenderTargetWriteMask[0]=7;
};

BlendState NoBlendNoAlphaWrite
{
	BlendEnable[0] = FALSE;
	RenderTargetWriteMask[0]=7;
	SrcBlend			= ONE;
	DestBlend			= ZERO;
};

BlendState NoBlendSetAlpha
{
	BlendEnable[0] = FALSE;
	RenderTargetWriteMask[0]=7;
	SrcBlend			= ONE;
	DestBlend			= ZERO;
	BlendOp				= ADD;
	SrcBlendAlpha		= ZERO;
	DestBlendAlpha		= ZERO;
	BlendOpAlpha		= ADD;
};


technique draw_lat_long_sphere
{
	pass noblend
	{		
		SetRasterizerState( RenderBackfaceCull );
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_DrawLatLongSphere()));
		SetPixelShader(debugps_5_0);
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AlphaBlend,vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF );
	}
}

technique draw_quad_on_sphere
{
	pass fill
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_DrawFilledQuadOnSphere()));
		SetPixelShader(debugps_5_0);
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AlphaBlend,vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF);
	}
	pass outline
	{		
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_DrawQuadOnSphere()));
		SetPixelShader(debugps_5_0);
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AddBlend,vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF );
	}
	pass chequer
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0, VS_DrawFilledQuadOnSphere()));
		SetPixelShader(CompileShader(ps_5_0, PS_DrawChequeredQuadOnSphere()));
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AlphaBlend, vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF);
	}
}

technique draw_axes_on_sphere
{
	pass main
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0, VS_DrawAxesOnSphere()));
		SetPixelShader(debugps_5_0);
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AlphaBlend, vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF);
	}
}

technique draw_texture_on_sphere
{
	pass p0 
	{		
		SetRasterizerState( RenderNoCull );
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_DrawTextureOnSphere()));
		SetPixelShader(CompileShader(ps_5_0,PS_DrawTextureOnSphere()));
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend,vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF );
	}
}

technique draw_curved_texture_on_sphere
{
	pass p0
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_DrawCurvedTextureOnSphere()));
		SetPixelShader(CompileShader(ps_5_0,PS_DrawTextureOnSphere()));
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AddBlend,vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF);
	}
}

technique draw_coloured_sphere
{
	pass p0
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0, VS_SimpleFullscreen));
		SetPixelShader(CompileShader(ps_5_0,PS_DrawColouredSphere()));
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AddBlend,vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF);
	}
}

technique draw_textured_sphere
{
	pass p0
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0, VS_SimpleFullscreen));
		SetPixelShader(CompileShader(ps_5_0,PS_DrawTexturedSphere()));
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AddBlend,vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF);
	}
}

technique draw_circle_on_sphere
{
	pass fill 
	{		
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_DrawFilledCircleOnSphere()));
		SetPixelShader(fillps_5_0);
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(StencilBlend,vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF );
	}
	pass outline
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_DrawCircleOnSphere()));
		SetPixelShader(debugps_5_0);
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AddBlend,vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF);
	}
}


technique draw_arc_on_sphere
{
	pass outline
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_DrawArcOnSphere()));
		SetPixelShader(debugps_5_0);
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AddBlend,vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF);
	}
}