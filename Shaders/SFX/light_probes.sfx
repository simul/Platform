//  Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "common.sl"
#include "render_states.sl"
#include "spherical_harmonics_constants.sl"
#include "noise.sl"
#include "spherical_harmonics.sl"
#include "light_probe_constants.sl"
#include "cubemap_matrices.sl"
#include "brdf.sl"

#ifndef OPENGL
#ifndef SIMUL_PI_F
#define SIMUL_PI_F (3.1415926536)
#endif
#ifndef pi
#define pi (3.1415926536)
#endif
// A texture (l+1)^2 of basis coefficients.
uniform StructuredBuffer<vec4> basisBuffer;

uniform Texture2DArray<vec4> sourceTextureArray;
uniform Texture2D<vec4> copySourceTexture;
uniform RWTexture2D<vec4> copyTargetTexture;

uniform TextureCube sourceCubemap;


vec4 EvaluateSH(vec3 view)
{
	// convert spherical coords to unit vector 
	//	vec3 vec		=vec3(sin(theta)*cos(phi),sin(theta)*sin(phi),cos(theta)); 
	// Therefore as atan2(y,x) is the angle from the X-AXIS:
	float theta		=acos(view.z);
	float phi		=atan2(view.y,view.x);
	// SH(int l, int m, float theta, float phi) is the basis function/
	// return a point sample of a Spherical Harmonic basis function 
	vec4 result		=vec4(0,0,0,0);
	// Coefficients for 
	//A_0 = 3.141593	0,0
	//A_1 = 2.094395	1,-1 1,0 1,1
	//A_2 = 0.785398	2,-2 2,-1 2,0 2,1 2,2
	//A_3 = 0			3,-3 3,-2 3,-1 3,0 3,1 3,2 3,3
	//A_4 = -0.130900 
	//A_5 = 0 
	//A_6 = 0.049087 

	float A[]={		3.1415926
						,2.094395
						,0.785398
						,0		
						,-0.130900
						,0 
						,0.049087
						,0
						,-0.02454
						,0
						,0.014317154
						,0
						,-0.009203885
						,0
						,0.006327671
						,0
						};
	int n=0;
	for(int l=0;l<MAX_SH_BANDS;l++)
	{
		if (l >= numSHBands)
			break;
		float w =  WindowFunction(float(l) / float(numSHBands)); // should we  bake this into SH?
		for (int m = -l; m <= l; m++)
			result += basisBuffer[n++] * SH(l, m, theta, phi) *w *A[l] / 3.1415926;
	}
	return result;
}

shader vec4 PS_IrradianceMap(posTexVertexOutput IN) : SV_TARGET
{
	vec4 clip_pos	=vec4(-1.0,1.0,1.0,1.0);
	clip_pos.x		+=2.0*IN.texCoords.x;
	clip_pos.y		-=2.0*IN.texCoords.y;

	vec3 view		=mul(invViewProj,clip_pos).xyz;
	view			=normalize(view);
	vec4 result		=EvaluateSH(view);
	//result.r = 0;
	//result.g= SH(4, -4, theta, phi);
	//result.b = -result.g;
	result.a=alpha;
	return max(result,vec4(0,0,0,0));
}

/*
uint ReverseBits32(uint bits) {
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return (bits);
}*/
vec2 Hammersley(uint index, uint NumSamples, uint2 random)
{
	float E1 = frac((float)index / float(NumSamples)+ (float(random.x & 0xFFFF) / float(1 << 16)));
//E1 =float(index) / float(NumSamples);
	// Radical inverse:
	float E2 = frac(float(reversebits(index) ^ random.y) * 2.3283064365386963e-10);
	return vec2(E1, E2);
}

shader vec4 PS_BlendMip(posTexVertexOutput IN) : SV_TARGET
{
	// sourceTexture is the source mip. So we sample "mip level 0", actually just the only mip we have.
	// TODO: blend from surrounding texels.
	vec4 src_lookup=sourceTextureArray.SampleLevel(clampSamplerState,vec3(IN.texCoords.xy,0),0);
	src_lookup.a=alpha;
	return src_lookup;
}

mat3 GetTangentBasis(vec3 Z_dir)
{
	vec3 UpVector = abs(Z_dir.z) < 0.999 ? vec3(0, 0, 1.0) : vec3(1.0, 0, 0);
	vec3 TangentX = normalize(cross(UpVector, Z_dir));
	vec3 TangentY = cross(Z_dir, TangentX);
	return transpose(mat3(TangentX, TangentY, Z_dir));
}

float3 TangentToWorld(vec3 Vec, vec3 Z_dir)
{
	return mul( GetTangentBasis(Z_dir), Vec);
}
float RoughnessFromMip(float Mip, float CubemapMaxMip)
{
	float LevelFrom1x1 = CubemapMaxMip - 1 - Mip;
	return exp2(( - LevelFrom1x1) / 1.2);
}

vec4 CosineSampleHemisphere(vec2 E)
{
	float Phi = 2.0 * PI * E.x;
	float cos_theta = sqrt(E.y);
	float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

	vec3 H;
	H.x = sin_theta * cos(Phi);
	H.y = sin_theta * sin(Phi);
	H.z = cos_theta;

	float PDF = cos_theta / PI;

	return vec4(H, PDF);
}

vec4 ImportanceSampleGGX(vec2 E, float roughness)
{
	float m = roughness * roughness;
	float m2 = m * m;

	float Phi = 2 * PI * E.x;
	float cos_theta = sqrt((1 - E.y) / (1 + (m2 - 1) * E.y));
	float sin_theta = sqrt(1 - cos_theta * cos_theta);

	vec3 H;
	H.x = sin_theta * cos(Phi);
	H.y = sin_theta * sin(Phi);
	H.z = cos_theta;

	float d = (cos_theta * m2 - cos_theta) * cos_theta + 1;
	float D = m2 / (PI*d*d);
	float PDF = D * cos_theta;

	return vec4(H, PDF);
}


float GetroughnessFromMip(float mip, float num_mips,float roughness_mip_scale)
{
	// exp2 is pow(2.0,x)
	return saturate(exp2( ( 3 - num_mips + mip) / roughness_mip_scale ));
}

vec4 RoughnessMip(vec3 view,bool rough) 
{
	vec4 outp;
	float r = saturate(roughness);//exp2( ( 3 - numMips + mipIndex) / 1.2 );;
	float CubeSize = float(int(1) << ( numMips - 1 ));
	const float SolidAngleTexel = 4.0 *PI / float(( 6.0 * CubeSize * CubeSize ) * 2.0);
	const uint NumSamples =  roughness < 0.1 ? 32 : 64;
	vec4 result = vec4(0,0,0,0);
	mat3 TangentToWorld = GetTangentBasis(view);
	float Weight = 0.0;
	for (uint i = 0; i < NumSamples; i++)
	{
		vec2 E = Hammersley(i, NumSamples, uint2(0,0));
		//E.y=.999;
		vec3 L;
		if(rough) // used for roughness > 0.99
		{
			// roughness=1, GGX is constant. Use cosine distribution instead
			L		= CosineSampleHemisphere(E).xyz;
			float NoL = L.z;
			L=mul( TangentToWorld, L);
		#ifdef CPP_GLSL
			result	+= sourceCubemap.SampleLevel(cubeSamplerState, vec3(-L.x, -L.y, L.z), 0) * NoL;
		#else
			result	+= sourceCubemap.SampleLevel(cubeSamplerState, L, 0) * NoL;
		#endif
			Weight += NoL;
		}
		else
		{
			E.y *= 0.995;
			vec3 H	= ImportanceSampleGGX(E, r).xyz;
			L		= 2*H.z*H - vec3(0,0,1.0);
	
			float NoL = L.z;
			if( NoL > 0 )
			{
				float NoH = H.z;
				float PDF = D_GGX( r, NoH ) * 0.25;
				float SolidAngleSample = 1.0 / ( NumSamples * PDF );
				float Mip = 0.5 * log2( SolidAngleSample / SolidAngleTexel );

				float ConeAngle = acos(saturate( 1.0 - SolidAngleSample / (2.0*PI) ));

				L = mul(  TangentToWorld, L );
				// Apply a limit to avoid numerical issues:
				#ifdef CPP_GLSL
					vec4 lookup=100.0*saturate(0.01*sourceCubemap.SampleLevel(cubeSamplerState,vec3(-L.x, -L.y, L.z), 0));
				#else
					vec4 lookup=100.0*saturate(0.01*sourceCubemap.SampleLevel(cubeSamplerState, L, 0));
				#endif
				result	+= NoL*lookup;
			
				Weight += NoL;
			}
		}
	}
	outp = result / Weight;
	//outp.rgb+=0.4*saturate(view)+0.1*saturate(-view);
	//outp.g= float(mipIndex)/3.0;
	return vec4(outp.rgb, alpha);
}

shader vec4 PS_RoughnessMip(posTexVertexOutput IN) : SV_TARGET
{
	// general case
	vec3 view = CubeTexCoordsToView(cubeFace, IN.texCoords);
	return RoughnessMip(view,false);
}

shader vec4 PS_RoughnessMip_Rough(posTexVertexOutput IN) : SV_TARGET
{
	// For roughness>0.99
	vec3 view = CubeTexCoordsToView(cubeFace, IN.texCoords);
	return RoughnessMip(view, true);
}

shader vec4 PS_RoughnessMip_Smooth(posTexVertexOutput IN) : SV_TARGET
{
	// for roughness<0.01
	vec3 view = CubeTexCoordsToView(cubeFace, IN.texCoords);
	return sourceCubemap.SampleLevel(cubeSamplerState, view, 0);
}


shader vec4 PS_CopyFace(posTexVertexOutput IN) : SV_TARGET
{
	vec4 linear_src=copySourceTexture.SampleLevel(clampSamplerState,IN.texCoords,0);
	vec4 result=linear_src;
	return result;
}

posTexVertexOutput SimpleFullscreenFlipTC(idOnly IN, bool flipHorizonal, bool flipVertical)
{
	posTexVertexOutput OUT;
	vec2 poss[4];
	poss[0]=vec2( 1.0,-1.0);
	poss[1]=vec2( 1.0, 1.0);
	poss[2]=vec2(-1.0,-1.0);
	poss[3]=vec2(-1.0, 1.0);
	vec2 pos		=poss[IN.vertex_id];
	OUT.hPosition	=vec4(pos,0.0,1.0);
	OUT.hPosition.z	=0.0; 
	OUT.texCoords	=0.5*(vec2(1.0,1.0)+vec2(pos.x,-pos.y));

	if(flipHorizonal)
		OUT.texCoords.x =1.0 - OUT.texCoords.x;
	if(flipVertical)
		OUT.texCoords.y =1.0 - OUT.texCoords.y;

	return OUT;
}

shader posTexVertexOutput VS_SimpleFullscreenFlipTC(idOnly IN)
{
#ifdef CPP_GLSL
	posTexVertexOutput pt=SimpleFullscreenFlipTC(IN, true, true);
#else
	posTexVertexOutput pt=SimpleFullscreenFlipTC(IN, false, false);
#endif
	return pt;
}

[numthreads(8,8,1)]
shader void CS_CopyFace(uint3 sub_pos: SV_DispatchThreadID)
{
	vec4 linear_src=copySourceTexture[sub_pos.xy];
	vec4 result=linear_src;
	copyTargetTexture[sub_pos.xy] =result;
}

BlendState ProbeBlend
{
	BlendEnable[0] = TRUE;
	SrcBlend = INV_SRC_ALPHA;
	DestBlend = SRC_ALPHA;
	BlendOp = ADD;
	SrcBlendAlpha = ONE;
	DestBlendAlpha = ZERO;
	BlendOpAlpha = ADD;
};

technique irradiance_map
{
    pass p0 
    {
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_SimpleFullscreenFlipTC()));
		SetPixelShader(CompileShader(ps_5_0,PS_IrradianceMap()));
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(ProbeBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
    }
}

fxgroup mip_from_roughness
{
	technique mip_from_roughness_blend
	{
		pass general
		{
			SetRasterizerState(RenderNoCull);
			SetGeometryShader(NULL);
			SetDepthStencilState(DisableDepth, 0);
			SetVertexShader(CompileShader(vs_5_0, VS_SimpleFullscreenFlipTC()));
			SetPixelShader(CompileShader(ps_5_0, PS_RoughnessMip()));
			SetBlendState(AlphaBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
		}
		pass rough
		{
			SetRasterizerState(RenderNoCull);
			SetGeometryShader(NULL);
			SetDepthStencilState(DisableDepth, 0);
			SetVertexShader(CompileShader(vs_5_0, VS_SimpleFullscreenFlipTC()));
			SetPixelShader(CompileShader(ps_5_0, PS_RoughnessMip_Rough()));
			SetBlendState(AlphaBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
		}
		pass smooth
		{
			SetRasterizerState(RenderNoCull);
			SetGeometryShader(NULL);
			SetDepthStencilState(DisableDepth, 0);
			SetVertexShader(CompileShader(vs_5_0, VS_SimpleFullscreenFlipTC()));
			SetPixelShader(CompileShader(ps_5_0, PS_RoughnessMip_Smooth()));
			SetBlendState(AlphaBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
		}
	}
	technique mip_from_roughness_no_blend
	{
		pass general
		{
			SetRasterizerState(RenderNoCull);
			SetGeometryShader(NULL);
			SetDepthStencilState(DisableDepth, 0);
			SetVertexShader(CompileShader(vs_5_0, VS_SimpleFullscreenFlipTC()));
			SetPixelShader(CompileShader(ps_5_0, PS_RoughnessMip()));
			SetBlendState(DontBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
		}
		pass rough
		{
			SetRasterizerState(RenderNoCull);
			SetGeometryShader(NULL);
			SetDepthStencilState(DisableDepth, 0);
			SetVertexShader(CompileShader(vs_5_0, VS_SimpleFullscreenFlipTC()));
			SetPixelShader(CompileShader(ps_5_0, PS_RoughnessMip_Rough()));
			SetBlendState(DontBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
		}
		pass smooth
		{
			SetRasterizerState(RenderNoCull);
			SetGeometryShader(NULL);
			SetDepthStencilState(DisableDepth, 0);
			SetVertexShader(CompileShader(vs_5_0, VS_SimpleFullscreenFlipTC()));
			SetPixelShader(CompileShader(ps_5_0, PS_RoughnessMip_Smooth()));
			SetBlendState(DontBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
		}
	}
}

technique blend_mip
{
    pass p0 
    {
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_SimpleFullscreenFlipTC()));
		SetPixelShader(CompileShader(ps_5_0,PS_BlendMip()));
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(ProbeBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
    }
}

technique overwrite_mip
{
    pass p0 
    {
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_SimpleFullscreenFlipTC()));
		SetPixelShader(CompileShader(ps_5_0,PS_BlendMip()));
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
    }
}

technique compute_copy_face
{
    pass p0 
    {
		SetComputeShader(CompileShader(cs_5_0,CS_CopyFace()));
    }
}
technique copy_face
{
	pass p0 
	{
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_SimpleFullscreenFlipTC()));
		SetPixelShader(CompileShader(ps_5_0,PS_CopyFace()));
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
	}
}
#endif
