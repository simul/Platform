%define api.prefix {prepro_}
%debug
%define parse.error verbose
%{
	#ifdef _MSC_VER
		// MS's C++ compiler is more strict than gcc
		// No unistd.h
		#define YY_NO_UNISTD_H
		// Direct IO functions (read and such)
		#include <io.h>
		// Disable the warning for yywrap
		#pragma warning( disable: 4003 )
		// Disable the warning about depracted naming of _read and friends
		#pragma warning( disable: 4996 )
		#define YY_NO_UNISTD_H
		#define YYERROR_VERBOSE
	#endif
	#include <stdio.h>
	#include <iostream>		// For std::cout and cerr
	#include <sstream>		// For std::ostringstream
	#include <vector>		// For std::vector
	#include <string>		// For std::string
	#include "Preprocessor.h"
	extern void prepro_error(const char *s);
	extern void prepro_warning(const char *s);
	#include "GeneratedFiles/PreprocessorLexer.h"
	#ifndef PREPRO_DEBUG
	#define PREPRO_DEBUG 0
	#endif
	using namespace std;
	bool preproError=false;
	// We use a stack of booleans to handle #if #else #endif.
	// At the top of the stack is a value that is TRUE is we are in an active block, and FALSE otherwise.
	// So: ifdef, if, and ifndef all add either TRUE or FALSE to the stack.
	// else switches the value at the top of the stack
	// and endif pops the stack.
	vector<bool> activeBlockStack;
	vector<string> blockTestStack;
	extern int preproBracket;
	uint64_t latest_datetime = 0;
	std::string latest_file;
	void ClearParserState()
	{
		activeBlockStack.clear();
		blockTestStack.clear();
		preproError=false;
		preproBracket=0;
	}
	bool inActiveBlock()
	{
		if(!activeBlockStack.size())
			return true;
		return activeBlockStack.back();
	}
	void ifdef(string id)
	{
		bool result	=IsDefined(id)&&inActiveBlock();
		activeBlockStack.push_back(result);
		blockTestStack.push_back(("#ifdef ")+id);
		Skip();
	}
	void ifndef(string id)
	{
		bool result=(!IsDefined(id))&&inActiveBlock();
		activeBlockStack.push_back(result);
		blockTestStack.push_back(("#ifndef ")+id);
		Skip();
	}
	bool hash_if(string id,Test test,int num=0)
	{
		if(test==IS_DEFINED)
		{
			return IsDefined(id);
		}
		if(test==NOT_DEFINED)
		{
			return !IsDefined(id);
		}
		const MacroDefinition *m=GetMacro(id);
		if(!m)
		{
			string str=string("Macro ")+id+string(" not defined");
			prepro_warning(str.c_str());
			return false;
		}
		int value=1;
		if(m->definition.size())
			value=atoi(m->definition[0].c_str());
		bool result=false;
		if(test==EQUALS)
		{
			result=(value==num);
		}
		else if(test==ZERO)
		{
			result=(value==0);
		}
		else if(test==NONZERO)
		{
			result=(value!=0);
		}
		else
		{
			prepro_error("Can't handle this condition");
			return false;
		}
		return result;
	}
	void apply_condition(string var,bool result)
	{
		activeBlockStack.push_back(result&&inActiveBlock());
		blockTestStack.push_back(var);
	}
	void endif()
	{
		if(activeBlockStack.size()==0)
			prepro_error("Mismatched #endif");
		else
		{
			activeBlockStack.pop_back();
			blockTestStack.pop_back();
		}
		Skip();
	}
	void hash_else()
	{
		{
			if(activeBlockStack.size()==0)
			{
				prepro_error("Mismatched #else");
				return;
			}
			else
			{
				bool current = activeBlockStack.back();
				activeBlockStack.pop_back();
				activeBlockStack.push_back((!current)&&inActiveBlock());
				if(current)
					Skip();
			}
		}
		blockTestStack.back() += " #else";
	}
%}
/* declare tokens */
%token NUMBER FLOATNUM
%token DEFINE IF IFDEF IFNDEF ELSE ENDIF IDENTIFIER IS_EQUAL BOOLEAN_NOT DEFINED AND OR WHITESPACE
%token EOL MACRO_NAME
%token TIMES_EQUALS OVER_EQUALS PERCENT_EQUALS PLUS_EQUALS MINUS_EQUALS LEFT_SHIFT_EQUALS RIGHT_SHIFT_EQUALS AND_EQUALS XOR_EQUALS OR_EQUALS
%token LESS_EQ GRTR_EQ LEFT_SHIFT RIGHT_SHIFT PLUS_PLUS MINUS_MINUS EQ_EQ NOT_EQ SYMBOL
%token DOUBLE_HASH

/*/% union
{
	std::string string;
};

%type<string> symbol*/

%%
prog : prog prepr
	| /* nothing */// matches at beginning of input
	{ // EOL is end of an expression
		//printf("\n= %d\n", $1);
	};

prepr : IF if_conditions
	{
		string var=$2.str;
		int num=$2.num;
		Test test=$2.test;
		apply_condition(var,$2.num!=0);
	}
	| MACRO_NAME optional_params
	{
		if(inActiveBlock())
		{
			string macro_name=$1.str;
			string str=ProcessMacro(macro_name,$2.strs);
				//Write(str.c_str());
				const char *p = str.c_str();
				const char *q = p + strlen(p);
				while(q > p)
					Unput(*--q);
		}
	}
	| IFNDEF IDENTIFIER
	{
		string id=$2.str;
		ifndef(id);
	}
	| IFDEF IDENTIFIER
	{
		string id=$2.str;
		ifdef(id);
	}
	| DEFINE IDENTIFIER optional_param_decls optional_definition
	{
		string id=$2.str;
		vector<string> def=$4.strs;
		string params=$3.str;
		if(inActiveBlock())
			DefineMacro(id,params,def);
		std::ostringstream definition;
		definition<<"#define "<<id;
		if(params.length())
			definition<<"("<<params<<")";
		if (def.size())
			definition << " ";
		for(int i=0;i<def.size();i++)
			definition<<def[i];
		definition<<"\n";
		if(inActiveBlock())
			Write(definition.str().c_str());
	}
	| ELSE
	{
		hash_else();
	}
	| ENDIF
	{
		endif();
	}
	| EOL
	{
	}
	| NUMBER
	{
		Write($1.str.c_str());
	}
	| '('
	{
		Write($1.str.c_str());
	}
	| AND
	{
		Write($1.str.c_str());
	}
	| ')'
	{
		Write($1.str.c_str());
	}
	| symbol
	{
		Write($1.str.c_str());
	}
	| ','
	{
		Write($1.str.c_str());
	}
symbol : '.'
	{
		$$.str=$1.str;
	}
	| '<'
	{
		$$.str=$1.str;
	}
	| '>'
	{
		$$.str=$1.str;
	}
	| '{'
	{
		$$.str=$1.str;
	}
	| '}'
	{
		$$.str=$1.str;
	}
	| ','
	{
		$$.str=$1.str;
	}
	| ';'
	{
		$$.str=$1.str;
	}
	| '='
	{
		$$.str=$1.str;
	}
	| '/'
	{
		$$.str=$1.str;
	}
	| '*'
	{
		$$.str=$1.str;
	}
	| '+'
	{
		$$.str=$1.str;
	}
	| '-'
	{
		$$.str=$1.str;
	}
	| '['
	{
		$$.str=$1.str;
	}
	| ']'
	{
		$$.str=$1.str;
	}
	| SYMBOL
	{
		$$.str=$1.str;
	}
optional_param_decls : '(' param_decl_list ')'
	{
		$$.str=$2.str;
	}
	|
	{
		$$.str="";
	};
param_decl_list : param_decl_list ',' expression
	{
		string s=$1.str+",";
		s+=$3.str;
		$$.str=s;
	}
	| expression
	{
		$$.str=$1.str;
	};
expression : conditional_exp
	{
		$$.str=$1.str;
	}
conditional_exp : logical_or_exp
	{
		$$.str=$1.str;
	}
	| logical_or_exp '?' expression ':' conditional_exp
	{
		$$.str=$1.str+$2.str+$3.str+$4.str+$5.str;
	};
logical_or_exp : logical_and_exp
	{
		$$.str=$1.str;
	}
	| logical_or_exp OR logical_and_exp
	{
		$$.str=$1.str;
	}
logical_and_exp : inclusive_or_exp
	{
		$$.str=$1.str;
	}
	| logical_and_exp AND inclusive_or_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	}
inclusive_or_exp : exclusive_or_exp
	{
		$$.str=$1.str;
	}
	| inclusive_or_exp '|' exclusive_or_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	}
exclusive_or_exp : and_exp
	{
		$$.str=$1.str;
	}
	| exclusive_or_exp '^' and_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	}
and_exp : equality_exp
	{
		$$.str=$1.str;
	}
	| and_exp '&' equality_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	};
equality_exp : relational_exp
	{
		$$.str=$1.str;
	}
	| equality_exp EQ_EQ relational_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	}
	| equality_exp NOT_EQ relational_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	}
relational_exp : shift_expression
	{
		$$.str=$1.str;
	}
	| relational_exp '<' shift_expression
	{
		$$.str=$1.str+$2.str+$3.str;
	}
	| relational_exp '>' shift_expression
	{
		$$.str=$1.str+$2.str+$3.str;
	}
	| relational_exp LESS_EQ shift_expression
	{
		$$.str=$1.str+$2.str+$3.str;
	}
	| relational_exp GRTR_EQ shift_expression
	{
		$$.str=$1.str+$2.str+$3.str;
	}
shift_expression : additive_exp
	{
		$$.str=$1.str;
	}
	| shift_expression LEFT_SHIFT additive_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	}
	| shift_expression RIGHT_SHIFT additive_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	}
additive_exp : mult_exp
	{
		$$.str=$1.str;
	}
	| additive_exp '+' mult_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	}
	| additive_exp '-' mult_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	}
mult_exp : cast_exp
	{
		$$.str=$1.str;
	}
	| mult_exp '*' cast_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	}
	| mult_exp '/' cast_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	}
	| mult_exp '%' cast_exp
	{
		$$.str=$1.str+$2.str+$3.str;
	}
cast_exp : unary_exp
	{
		$$.str=$1.str;
	}
unary_exp : postfix_exp
	{
		$$.str=$1.str;
	}
	| PLUS_PLUS unary_exp
	{
		$$.str=$1.str+$2.str;
	}
	| MINUS_MINUS unary_exp
	{
		$$.str=$1.str+$2.str;
	}
	| unary_operator cast_exp
	{
		$$.str=$1.str+$2.str;
	}
unary_operator : '&' | '*' | '+' | '-' | '~' | '!'
	{
		$$.str=$1.str;
	}
postfix_exp : primary_exp
	{
		$$.str=$1.str;
	}
	| postfix_exp '[' expression ']'
	{
		$$.str=$1.str+$2.str+$3.str+$4.str;
	}
	| postfix_exp '(' argument_exp_list ')'
	{
		$$.str=$1.str+$2.str+$3.str+$4.str;
	}
	| postfix_exp '('			')'
	{
		$$.str=$1.str+$2.str+$3.str;
	}
	| postfix_exp '.' IDENTIFIER
	{
		$$.str=$1.str+$2.str+$3.str;
	}

primary_exp	: IDENTIFIER
	{
		$$.str=$1.str;
	}
	| const
	{
		$$.str=$1.str;
	}
	| '(' expression ')'
	{
		$$.str=$1.str+$2.str+$3.str;
	}
const : NUMBER
	{
		$$.str=$1.str;
	}
argument_exp_list : argument_exp_list ',' conditional_exp
	{
		string &el=$3.str;
		vector<string> &defs=$$.strs;
		defs=$1.strs;
		defs.push_back(el);
		$$.str=$1.str+$2.str+$3.str;
	}
	| conditional_exp
	{
		string &el=$1.str;
		vector<string> &defs=$$.strs;
		defs.clear();
		defs.push_back(el);
		$$.str=el;
	}
optional_params : '(' argument_exp_list ')'
	{
		$$.str=$1.str+$2.str+$3.str;
		$$.strs=$2.strs;
	}
	|
	{
		$$.str="";
		$$.strs.clear();
	};

if_conditions : if_conditions OR if_condition
	{
		$$.num=$1.num|$3.num;
		$$.str=($1.str+"|")+$3.str;
	}
	| if_condition
	{
		$$.str=$1.str;
		$$.num=$1.num;
	};
if_condition : IDENTIFIER if_test
	{
		string id=$1.str;
		int num=$2.num;
		Test test=$2.test;
		$$.num=hash_if(id,test,num);
		$$.str=$1.str+$2.str;
	}
	| BOOLEAN_NOT IDENTIFIER
	{
		$$.test=ZERO;
		string id=$2.str;
		$$.num=hash_if(id,$$.test);
		$$.str=id;
	};
	| optional_boolean_not defined_test
	{
		$$.test=$1.test;
		Test test=$1.test;
		string id=$1.str+$2.str;
		$$.num=hash_if(id,$1.test);
		$$.str=id;
	};
	| NUMBER
	{
		$$.test=NONZERO;
		string id=$1.str;
		$$.num=($1.num!=0);
		$$.str=id;
	};
defined_test : DEFINED '(' IDENTIFIER ')'
	{
		$$.str="defined(";
		$$.str+=$3.str;
		$$.str+=")";
	};
optional_boolean_not : BOOLEAN_NOT
	{
		$$.str="!";
		$$.test=NOT_DEFINED;
	}
	|
	{
		$$.str="";
		$$.test=IS_DEFINED;
	};
if_test : IS_EQUAL NUMBER
	{
		$$.num=$2.num;
		$$.test=EQUALS;
		$$.str="==";
		$$.str+=$2.str;
	}
	|
	{
		$$.str="";
		$$.num=1;
		$$.test=NONZERO;
	};
optional_definition : WHITESPACE opt_definition
	{
		$$.str = "";
		$$.strs= $2.strs;
	}
	|
	{
		$$.strs.clear();
		$$.str = "";
	}
opt_definition : opt_definition definition_element
	{
			string &el=$2.str;
			vector<string> &defs=$$.strs;
			defs=$1.strs;
			defs.push_back(el);
	}
	| definition_element
	{
			string &el=$1.str;
			vector<string> &defs=$$.strs;
			defs.clear();
			defs.push_back(el);
	};
	|
	{
		$$.strs.clear();
	};
definition_element : IDENTIFIER
	{
		$$.str=$1.str;
	}
	| '('
	{
		$$.str=$1.str;
	}
	| ')'
	{
		$$.str=$1.str;
	}
	| NUMBER
	{
	  $$.str=$1.str;
	}
	| DOUBLE_HASH IDENTIFIER
	{
		$$.str = $1.str+$2.str;
	}
	| symbol
	{
		$$.str=$1.str;
	}
	| WHITESPACE
	{
		$$.str=$1.str;
	}
%%

extern std::string currentFilename;
void prepro_warning(const char *errmsg)
{
	using namespace std;
	ostringstream errMsg;
	int lex_linenumber=prepro_get_lineno();
	int true_linenumber=lex_linenumber;//+last_linenumber-global_linenumber;
	errMsg<<currentFilename<<"("<< true_linenumber<<"): Preprocessor warning: "<<errmsg;
	std::cerr<<errMsg.str().c_str()<<std::endl;
}

void prepro_warning(const char *errmsg,const char *filename,int linenumber)
{
	using namespace std;
	ostringstream errMsg;
	errMsg<<filename<<"("<< linenumber<<"): Preprocessor warning: "<<errmsg;
	std::cerr<<errMsg.str().c_str()<<std::endl;
}

void prepro_error(const char *errmsg)
{
	using namespace std;
	ostringstream errMsg;
	int lex_linenumber=prepro_get_lineno();
	int true_linenumber=lex_linenumber;//+last_linenumber-global_linenumber;
	const char *txt=prepro_get_text();
	if(txt)
	{
		string str(txt);
		errMsg<<currentFilename<<"("<< true_linenumber<<"): Preprocessor error: \""<< txt<<"\"\n"<<errmsg;
	}
	else
		errMsg<<currentFilename<<"("<< true_linenumber<<"): Preprocessor error: "<<errmsg;
	std::cerr<<errMsg.str().c_str()<<std::endl;
  	//throw std::runtime_error(errMsg.str());
	preproError=true;
}