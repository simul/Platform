%option yylineno
%option warn
%option noyywrap
%option prefix="prepro_"
%x IFILE PREPRO DEFINING DEFINING2 DEFINING3 DEFINING4 IN_MACRO_DEFINITION IF_STATEMENT START_INSERTING_MACRO INSERTING_MACRO IN_MULTILINE_COMMENT

%{
	#ifdef _MSC_VER
		// MS's C++ compiler is more strict than gcc
		// No unistd.h
		#define YY_NO_UNISTD_H
		// Direct IO functions (read and such)
		#include <io.h>
		// Disable the warning for yywrap
		#pragma warning( disable: 4003 )
		// Disable the warning about depracted naming of _read and friends
		#pragma warning( disable: 4996 )
		#pragma optimize("",off )
	#endif
	#include <stdint.h>			// for int types
	#include <sstream>			// for ostringstream
	#include <iostream>			// for cerr and cout
	#include <map>				// for map
	#include <vector>			// for std::vector
	#include "Preprocessor.h"
	#include "GeneratedFiles/PreprocessorParser.h"
	#define register
	#undef STDINT
	using namespace std;
	int chars = 0;
	int words = 0;
	int lines = 0;
	int preproBracket=0;
	struct BufferStack
	{
		struct BufferStack *prev;	/* previous entry */
		YY_BUFFER_STATE bs;			/* saved buffer */
		int lineno;					/* saved line number */
		const char *filename;		/* name of this file */
		FILE *file;					/* current file */
	};
	BufferStack *currentBuffer = 0;
	std::string currentFilename;
	
	int newfile(const char *fn);
	int popfile(void);
	extern bool preproError;
	extern void prepro_error(const char *s);
	extern void prepro_warning(const char *s);
	extern void prepro_warning(const char *s,const char *file,int line);
	extern int prepro_get_lineno ();
	FILE* (*prepro_open)(const char *filename_utf8,string &fullPathName,double &filedate)=NULL;

	void (*prepro_close)(FILE *f)=NULL;
	std::ostringstream preproOutput;
	// many languages don't recognize filenames in the #line directive, e.g. #line 15 mycode.h,
	// But PSSL recognizes ONLY filenames, not file-numbers.
	map<string,int> filenamesUtf8;
	static int last_filenumber=0;
	static int current_state=0;
	static int skip_from=0;
	static bool write_line_number_next=false;
	static bool disableLineWrites=false;
	void WriteLineNumber(int l)
	{
		if(inActiveBlock())
		{
			std::string f=currentFilename;
			size_t p=f.find("\\");
			while(p<f.length())
			{
				f=f.replace(f.begin()+p,f.begin()+p+1,"/");
				p=f.find("\\");
			}
			if (disableLineWrites)
				preproOutput<<"//";
			preproOutput<<"#line "<<l<<" \""<<f<<"\""<<endl;
		}
		write_line_number_next=false;
	}
	void WriteLineNumber()
	{
		WriteLineNumber(yylineno);
	}
	void Unput(int c);
	void Write(const char *tt)
	{
		const char *t=tt;
		bool non_empty=false;
		int num_lines=0;
		while(*t)
		{
			if(*t=='\n')
			{
				num_lines++;
			}
			t++;
		}
		t=tt;
		while(*t)
		{
			if(*t!='\n'&&*t!=' '&&*t!='\r'&&*t!='\t')
			{
				non_empty=true;
				break;
			}
			t++;
		}
		if(non_empty&&write_line_number_next)
			WriteLineNumber(yylineno-num_lines);
		current_state=YY_START;
		preproOutput<<tt;
	}
	void Write()
	{
		Write(yytext);
	}
	void Skip()
	{
		skip_from=yylineno;
		write_line_number_next=true;
	}
	typedef map<string,MacroDefinition*> MacroMap;
	MacroMap macros;
	bool IsDefined(std::string name)
	{
		MacroMap::iterator i=macros.find(name);
		return (i!=macros.end());
	}
	bool HasParameters(std::string name)
	{
		MacroMap::iterator i=macros.find(name);
		return (i!=macros.end()&&i->second->parameters.size()>0);
	}
	const MacroDefinition *GetMacro(std::string name)
	{
		MacroMap::iterator i=macros.find(name);
		if(i!=macros.end())
			return i->second;
		else return NULL;
	}
	// TODO: macros defined in a #if block should not be used in the #else.
	void DefineMacro(std::string name,std::string params,const std::vector<std::string> &definition)
	{
		if(macros.find(name)!=macros.end())
		{
			prepro_warning((name+" redefined.").c_str());
			prepro_warning("See previous definition.",macros[name]->filename.c_str(),macros[name]->line_number);
		}
		macros[name]=new MacroDefinition;
		macros[name]->definition=definition;
		
		macros[name]->line_number=prepro_get_lineno();
		macros[name]->filename=currentFilename;
		for(auto i=definition.begin();i!=definition.end();i++)
		{
			if(*i==name)
			{
				prepro_error((string("Recursive macro definition for ")+name).c_str());
				return;
			}
		}
		if(params.length())
		{
			int start=0;
			while(start<(int)params.length())
			{
				int i=(int)params.find(",",start);
				if(i<start)
					i=(int)params.length();
				string param=params.substr(start,i-start);
				macros[name]->parameters.push_back(param);
				start=i+1;
			}
		}
	}
	void UndefineMacro(std::string name)
	{
		MacroMap::iterator i=macros.find(name);
		if(i!=macros.end())
		{
			delete i->second;
			macros.erase(i);
		}
	}
	void ClearMacros()
	{
		while(macros.size())
		{
			MacroMap::iterator i=macros.begin();
			delete i->second;
			macros.erase(i);
		}
		currentBuffer=NULL;
	}
	string join(const vector<string> &replacements,string sep)
	{
		string str;
		for(int i=0;i<replacements.size();i++)
		{
			if(i)
				str+=sep;
			str+=replacements[i];
		}
		return str;
	}
	string ProcessMacro(string id,const vector<string> &replacements)
	{
		MacroMap::iterator i=macros.find(id);
		if(i==macros.end())
		{
			return ((id+"(")+join(replacements,","))+")";
		}
		vector<string> def=i->second->definition;

		if(replacements.size()!=i->second->parameters.size())
		{
			prepro_error("Wrong number of arguments to macro");
			return id;
		}
		string outp;
		for(int j=0;j<(int)def.size();j++)
		{
			string el=def[j];
			bool found=false;
			for(int k=0;k<(int)i->second->parameters.size();k++)
			{
				string param=i->second->parameters[k];
				string rep=replacements[k];
				if(el==param||el==(string("##")+param))
				{
					outp+=rep;//+" ";
					found=true;
					break;
				}
			}
			if(!found)
				outp+=el;//+" ";
		}
		return outp;
	}
	std::string pp_recent;
	static int ppReturn_(int u)
	{
		prepro_lval.str=yytext;
		pp_recent += prepro_lval.str + " ";
		while (pp_recent.length() > 100)
			pp_recent.erase(0, 1);
		return (u);
	}
	#define stdReturn(u) return ppReturn_(u)
%}

ID_BLCK [a-zA-Z_:][a-zA-Z0-9_:]*
NUM_BLCK 0|([1-9][0-9]*)
FLOAT_BLCK [0-9]*((\.[0-9])|([0-9]\.))[0-9]*

%%		
<INITIAL>"/*"										{
														BEGIN IN_MULTILINE_COMMENT;
														if (inActiveBlock())
															Write();
													}
<IN_MULTILINE_COMMENT>"*/"							{
														if (inActiveBlock())
															Write();
														BEGIN INITIAL;
													}
<IN_MULTILINE_COMMENT>[^"*"]+						{
														if (inActiveBlock())
															Write();
													}
<IN_MULTILINE_COMMENT>"*"							{
														if (inActiveBlock())
															Write();
													}
<INITIAL>"//"[^\n\\]*(\\+[^\\][^\n\\]*)*\n			{
														if (inActiveBlock())
															Write();/* Single line comment (with possible continuation)*/
													}
<INITIAL>"#"if										{
														BEGIN IF_STATEMENT;
														prepro_lval.str=yytext;
														stdReturn(IF);
													}
<INITIAL>"#"ifndef									{
														BEGIN PREPRO;
														prepro_lval.str=yytext;
														stdReturn(IFNDEF);
													}
<INITIAL>"#"ifdef									{
														BEGIN PREPRO;
														prepro_lval.str=yytext;
														stdReturn(IFDEF);
													}
<INITIAL>"#"else									{
														BEGIN PREPRO;
														prepro_lval.str=yytext;
														stdReturn(ELSE);
													}
<INITIAL>"#"endif									{
														BEGIN PREPRO;
														prepro_lval.str=yytext;
														stdReturn(ENDIF);
													}
<INITIAL>^"#"include[ \t]*[\"<] 					{
													 BEGIN IFILE; /*match #include statement up through the quote or <*/
													}
<IFILE>[^ \t\n\">]+									{
														int c=0;
														string add;
														/*handle filename up to the closing quote, >, or end of line*/
														{
															while((c = yyinput()) && c != '\n'&&c>=0)
															{
																add+=c;
															}
														}
														if(inActiveBlock())
														{
															const char *fn=yytext;
															if(!newfile(fn))
															{
																ClearMacros();
																yyterminate(); /* no such file */
															}
														}
														BEGIN INITIAL;
													}
<IFILE>.|\n											{
														std::cerr<<"%4d bad include line "<<yylineno<<std::endl;
														ClearMacros();
														yyterminate();
													}
<INITIAL>{ID_BLCK}									{
														prepro_lval.str = yytext;
														if(IsDefined(prepro_lval.str.c_str()))
														{
															if(HasParameters(prepro_lval.str.c_str()))
															{
																BEGIN START_INSERTING_MACRO;
																stdReturn(MACRO_NAME);
															}
															string str=ProcessMacro(prepro_lval.str,vector<string>());
															if (inActiveBlock())
															{
																//Write(str.c_str());
																const char *p = str.c_str();
																const char *q = p + strlen(p);
																while(q > p)
																	unput(*--q);
															}
														}
														else
														{
															if (inActiveBlock())
																Write();
														}
													}
<PREPRO>{ID_BLCK}									{
														prepro_lval.str=yytext;
														stdReturn(IDENTIFIER);
													}
<START_INSERTING_MACRO>"("							{
														prepro_lval.str = yytext;
														BEGIN INSERTING_MACRO;
														preproBracket=1;
														stdReturn('(');
													}
<START_INSERTING_MACRO>.							{		// anything but open-bracket? this wasn't a macro.
														if (inActiveBlock())
														{
															prepro_lval.str = yytext;
															Write(prepro_lval.str.c_str());
															Write();
														}
														BEGIN INITIAL;
													}
<INSERTING_MACRO,IN_MACRO_DEFINITION>{ID_BLCK}		{
														prepro_lval.str = yytext;
														stdReturn(IDENTIFIER);
													}
<INSERTING_MACRO,IN_MACRO_DEFINITION>{FLOAT_BLCK}	{
														prepro_lval.str = yytext;
														stdReturn(NUMBER);
													}
<INSERTING_MACRO,IN_MACRO_DEFINITION>{NUM_BLCK}	{
													prepro_lval.str = yytext;
													stdReturn(NUMBER);
												}
<INSERTING_MACRO,IN_MACRO_DEFINITION>","		{
													prepro_lval.str = yytext;
													stdReturn(',');
												}
<IN_MACRO_DEFINITION,IF_STATEMENT>")"			{
													prepro_lval.str = yytext;
													stdReturn(')');
												}
<INSERTING_MACRO,IN_MACRO_DEFINITION>[;*/+]		{
													prepro_lval.str = yytext;
													stdReturn(prepro_lval.str[0]);
												}
<INSERTING_MACRO,IN_MACRO_DEFINITION>[-=!~]		{
													prepro_lval.str = yytext;
													stdReturn(prepro_lval.str[0]);
												}
<INSERTING_MACRO,IN_MACRO_DEFINITION>[\.]		{
													prepro_lval.str = yytext;
													stdReturn(prepro_lval.str[0]);
												}
<INSERTING_MACRO,IN_MACRO_DEFINITION>"{"		{
													prepro_lval.str=yytext;
													stdReturn('{');
												}
<IN_MACRO_DEFINITION>"}"						{
													prepro_lval.str=yytext;
													stdReturn('}');
												}
<INSERTING_MACRO,IN_MACRO_DEFINITION>"["		{
													stdReturn('[');
												}
<INSERTING_MACRO,IN_MACRO_DEFINITION>"]"		{
													stdReturn(']');
												}
<INSERTING_MACRO,IN_MACRO_DEFINITION>"<"		{
													stdReturn('<');
												}
<INSERTING_MACRO,IN_MACRO_DEFINITION>">"		{
													stdReturn('>');
												}
<IN_MACRO_DEFINITION>"##"						{
													stdReturn(DOUBLE_HASH);
												}
<INSERTING_MACRO>"("							{
													prepro_lval.str = yytext;
													preproBracket++;
													stdReturn('(');
												}
<INSERTING_MACRO>")"							{
													prepro_lval.str = yytext;
													preproBracket--;
													if(preproBracket<=0)
													{
														BEGIN INITIAL;
													}
													stdReturn(')');
												}
<INSERTING_MACRO>"*="							stdReturn(TIMES_EQUALS);
<INSERTING_MACRO>"/="							stdReturn(OVER_EQUALS);
<INSERTING_MACRO>"%="							stdReturn(PERCENT_EQUALS);
<INSERTING_MACRO>"+="							stdReturn(PLUS_EQUALS);
<INSERTING_MACRO>"-="							stdReturn(MINUS_EQUALS);
<INSERTING_MACRO>"<<="							stdReturn(LEFT_SHIFT_EQUALS);
<INSERTING_MACRO>">>="							stdReturn(RIGHT_SHIFT_EQUALS);
<INSERTING_MACRO>"&="							stdReturn(AND_EQUALS);
<INSERTING_MACRO>"^="							stdReturn(XOR_EQUALS);
<INSERTING_MACRO>"|="							stdReturn(OR_EQUALS);
<INSERTING_MACRO>"||"							stdReturn(OR);
<INSERTING_MACRO>"&&"							stdReturn(AND);

<INSERTING_MACRO>"<="							stdReturn(LESS_EQ);
<INSERTING_MACRO>">="							stdReturn(GRTR_EQ);

<INSERTING_MACRO>"<<"							stdReturn(LEFT_SHIFT);
<INSERTING_MACRO>">>"							stdReturn(RIGHT_SHIFT);

<INSERTING_MACRO>"++"							stdReturn(PLUS_PLUS);
<INSERTING_MACRO>"--"							stdReturn(MINUS_MINUS);
<INSERTING_MACRO>"=="							stdReturn(EQ_EQ);
<INSERTING_MACRO>"!="							stdReturn(NOT_EQ);
<IF_STATEMENT>"defined"							{
													prepro_lval.str=yytext;
													stdReturn(DEFINED);
												}
<IF_STATEMENT,IN_MACRO_DEFINITION>"||"			{
													prepro_lval.str=yytext;
													stdReturn(OR);
												}
<IF_STATEMENT,IN_MACRO_DEFINITION>"&&"			{
													prepro_lval.str=yytext;
													stdReturn(AND);
												}
<IF_STATEMENT,IN_MACRO_DEFINITION>"("			{
													prepro_lval.str=yytext;
													stdReturn('(');
												} 
<IF_STATEMENT,DEFINING3,IN_MACRO_DEFINITION>{ID_BLCK}	{
															prepro_lval.str=yytext;
															stdReturn(IDENTIFIER);
														}
<IF_STATEMENT,IN_MACRO_DEFINITION>{NUM_BLCK}	{
														prepro_lval.str=yytext;
														prepro_lval.num=atoi(prepro_lval.str.c_str());
														stdReturn(NUMBER);
												}
<DEFINING,DEFINING2,DEFINING3>{NUM_BLCK}		{
													prepro_lval.str = yytext;
													prepro_lval.num = atoi(prepro_lval.str.c_str());
													stdReturn(NUMBER);
												}
<DEFINING,DEFINING3>[ \t]						{
												}
<IN_MACRO_DEFINITION>[ \t]						{
													prepro_lval.str=yytext;
													stdReturn(WHITESPACE);
												}
<IF_STATEMENT>"!"								{
													prepro_lval.str=yytext;
													stdReturn(BOOLEAN_NOT);
												}
<IF_STATEMENT>"=="								{
													prepro_lval.str=yytext;
													stdReturn(IS_EQUAL);
												}
<IF_STATEMENT>\n								{
													prepro_lval.str=yytext;
													BEGIN INITIAL;
													stdReturn(EOL);
												}
<IF_STATEMENT>"//"[^\n]+						{
													prepro_lval.str=yytext;
													BEGIN INITIAL;
													stdReturn(EOL);
												}
<INITIAL>"#"define								{
													prepro_lval.str=yytext;
													BEGIN DEFINING;
													stdReturn(DEFINE);
												}
<INITIAL>"#"refine								{
													prepro_lval.str = yytext;
													BEGIN DEFINING;
													stdReturn(DEFINE);
												}
<DEFINING>{ID_BLCK}								{
													prepro_lval.str=yytext;
													BEGIN DEFINING2;
													stdReturn(IDENTIFIER);
												}
<DEFINING2>"("									{
													BEGIN DEFINING3;
													prepro_lval.str=yytext;
													stdReturn('(');
												} 
<DEFINING3>","									{
													prepro_lval.str=yytext;
													stdReturn(',');
												}
<DEFINING3>")"									{
													prepro_lval.str=yytext;
													BEGIN DEFINING4;
													stdReturn(')');
												}
<DEFINING2,DEFINING4>[ \t]+						{
													prepro_lval.str=yytext;
													BEGIN IN_MACRO_DEFINITION;
													// The ACTUAL macro definition follows,
													// e.g. in #define texture_clamp(tex,texc) texture(tex,texc)
													// this would be texture(tex,texc)
													// so in the IN_MACRO_DEFINITION, we should recognize ID_BLCK, brackets, NUM_BLCK, all the standard stuff.
													// We won't use this whitespace though.
													stdReturn(WHITESPACE);
												}
<PREPRO,DEFINING,DEFINING2,DEFINING4,IN_MACRO_DEFINITION,IF_STATEMENT>\n	{
																				prepro_lval.str=yytext;
																				BEGIN INITIAL;
																				stdReturn(EOL);
																			}
<DEFINING,DEFINING2,PREPRO><<EOF>>				{
													BEGIN INITIAL;
													if(!popfile())
													{
														ClearMacros();
														yyterminate();
													}
												}
<INITIAL><<EOF>>								{
													if(!popfile())
													{
														ClearMacros();
														yyterminate();
													}
												}
<INITIAL>^.										{
													current_state=YY_START;
													if(inActiveBlock())
														Write();
												}
<INITIAL>^\n									{
													current_state=YY_START;
													if(inActiveBlock())
														Write();
												}

<INITIAL>\n 									{
													current_state=YY_START;
													if(inActiveBlock())
														Write();
												}
<INITIAL>.										{	
													current_state=YY_START;
													if(inActiveBlock())
														Write();
												}
<INITIAL,PREPRO,DEFINING,IN_MACRO_DEFINITION,INSERTING_MACRO,IF_STATEMENT>" "	{
																					Write();
																				}
<IN_MACRO_DEFINITION>[#\\]						{
													if (inActiveBlock())
														Write(); 
												}

%%
void Preprocess(int argc, char **argv)
{
	yylex();
}

int newfile(const char *fn)
{
	std::string fullPathName;
	double datetime=0.0;
	FILE *f = prepro_open(fn,fullPathName,datetime);

	/* die if no file or no room */
	if(!f)
	{
		prepro_error((string("File not found ")+fn).c_str());
		return 0;
	}
	if(datetime>latest_datetime)
	{
		latest_file=fn;
		latest_datetime=datetime;
	}
	BufferStack *bs		=new BufferStack;
	if(!bs)
	{
		prepro_error("malloc");
		exit(66);
	}
	/* remember state */
	if(currentBuffer)
		currentBuffer->lineno	=yylineno;
	bs->prev			=currentBuffer;
	/* set up current entry */
	bs->bs				=yy_create_buffer(f, YY_BUF_SIZE);
	bs->file			=f;
	yy_switch_to_buffer(bs->bs);
	currentBuffer		=bs;
	yylineno			=1;
	currentFilename		=fullPathName;
	if(filenamesUtf8.find(fullPathName)==filenamesUtf8.end())
	{
		// Record the file number:
		filenamesUtf8[fullPathName]=last_filenumber;
		last_filenumber++;
	}
	bs->filename		=filenamesUtf8.find(fullPathName)->first.c_str();
	//WriteLineNumber(yylineno);
	Skip();
	return 1;
}

int popfile()
{
	BufferStack *bs		=currentBuffer;
	BufferStack *prevbs;
	if(!bs)
	{
		std::cout<<"no buf";
		return 0;
	}
	/* get rid of current entry*/
	prepro_close(bs->file);
	yy_delete_buffer(bs->bs);
	/* switch back to previous */
	prevbs = bs->prev;
	if(!prevbs)
	{
		delete bs;
		ClearMacros();
		return 0;
	}
	yy_switch_to_buffer(prevbs->bs);
	currentBuffer		=prevbs;
	yylineno			=currentBuffer->lineno;
	currentFilename		=currentBuffer->filename;
	
	Skip();
	delete bs;
	return 1;
}

vector<string> GetPreprocessorFilenamesUtf8()
{
	vector<string> newvec;
	for(map<string,int>::iterator i=filenamesUtf8.begin();i!=filenamesUtf8.end();i++)
	{
		if(i->second>=(int)newvec.size())
			newvec.resize((size_t)(i->second+1));
		newvec[i->second]=i->first;
	}
	return newvec;
}
bool preprocess(const char *filenameUtf8, map<string, string> defines,bool disable_line_writes)
{
	disableLineWrites=disable_line_writes;
	ClearParserState();
	vector<string> s;

	BEGIN INITIAL;
	preproOutput.str("");
	for (map<string, string>::const_iterator i = defines.begin(); i != defines.end(); i++)
	{
		preproOutput << "#define " << i->first << " " << i->second << std::endl;
		vector<string> s;
		s.push_back(i->second);
		DefineMacro(i->first,"",s);
	}
	preproOutput.str("");
	filenamesUtf8.clear();
	last_filenumber=0;
	newfile(filenameUtf8);

	prepro_parse();
	return !preproError;
}
void Unput(int c)
{
	unput(c);
}